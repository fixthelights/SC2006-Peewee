"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BarPlot = BarPlot;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _SeriesContextProvider = require("../context/SeriesContextProvider");
var _CartesianContextProvider = require("../context/CartesianContextProvider");
var _BarElement = require("./BarElement");
var _axis = require("../models/axis");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * Solution of the equations
 * W = barWidth * N + offset * (N-1)
 * offset / (offset + barWidth) = r
 * @param bandWidth The width available to place bars.
 * @param numberOfGroups The number of bars to place in that space.
 * @param gapRatio The ratio of the gap between bars over the bar width.
 * @returns The bar width and the offset between bars.
 */function getBandSize({
  bandWidth: W,
  numberOfGroups: N,
  gapRatio: r
}) {
  if (r === 0) {
    return {
      barWidth: W / N,
      offset: 0
    };
  }
  const barWidth = W / (N + (N - 1) * r);
  const offset = r * barWidth;
  return {
    barWidth,
    offset
  };
}
function BarPlot(props) {
  const seriesData = React.useContext(_SeriesContextProvider.SeriesContext).bar;
  const axisData = React.useContext(_CartesianContextProvider.CartesianContext);
  if (seriesData === undefined) {
    return null;
  }
  const {
    series,
    stackingGroups
  } = seriesData;
  const {
    xAxis,
    yAxis,
    xAxisIds,
    yAxisIds
  } = axisData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
    children: stackingGroups.flatMap(({
      ids: groupIds
    }, groupIndex) => {
      return groupIds.flatMap(seriesId => {
        const xAxisKey = series[seriesId].xAxisKey ?? defaultXAxisId;
        const yAxisKey = series[seriesId].yAxisKey ?? defaultYAxisId;
        const xAxisConfig = xAxis[xAxisKey];
        const yAxisConfig = yAxis[yAxisKey];
        const verticalLayout = series[seriesId].layout === 'vertical';
        let baseScaleConfig;
        if (verticalLayout) {
          if (!(0, _axis.isBandScaleConfig)(xAxisConfig)) {
            throw new Error(`Axis with id "${xAxisKey}" shoud be of type "band" to display the bar series of id "${seriesId}"`);
          }
          if (xAxis[xAxisKey].data === undefined) {
            throw new Error(`Axis with id "${xAxisKey}" shoud have data property`);
          }
          baseScaleConfig = xAxisConfig;
        } else {
          if (!(0, _axis.isBandScaleConfig)(yAxisConfig)) {
            throw new Error(`Axis with id "${yAxisKey}" shoud be of type "band" to display the bar series of id "${seriesId}"`);
          }
          if (yAxis[yAxisKey].data === undefined) {
            throw new Error(`Axis with id "${xAxisKey}" shoud have data property`);
          }
          baseScaleConfig = yAxisConfig;
        }
        const xScale = xAxisConfig.scale;
        const yScale = yAxisConfig.scale;
        const bandWidth = baseScaleConfig.scale.bandwidth();
        const {
          barWidth,
          offset
        } = getBandSize({
          bandWidth,
          numberOfGroups: stackingGroups.length,
          gapRatio: baseScaleConfig.barGapRatio
        });
        const barOffset = groupIndex * (barWidth + offset);
        const {
          stackedData,
          color
        } = series[seriesId];
        return stackedData.map((values, dataIndex) => {
          const baseline = Math.min(...values);
          const value = Math.max(...values);
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_BarElement.BarElement, (0, _extends2.default)({
            id: seriesId,
            dataIndex: dataIndex,
            x: verticalLayout ? xScale(xAxis[xAxisKey].data?.[dataIndex]) + barOffset : xScale(baseline),
            y: verticalLayout ? yScale(value) : yScale(yAxis[yAxisKey].data?.[dataIndex]) + barOffset,
            height: verticalLayout ? Math.abs(yScale(baseline) - yScale(value)) : barWidth,
            width: verticalLayout ? barWidth : Math.abs(xScale(baseline) - xScale(value)),
            color: color,
            highlightScope: series[seriesId].highlightScope
          }, props), `${seriesId}-${dataIndex}`);
        });
      });
    })
  });
}
process.env.NODE_ENV !== "production" ? BarPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: _propTypes.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: _propTypes.default.object
} : void 0;