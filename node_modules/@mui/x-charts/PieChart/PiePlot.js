"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PiePlot = PiePlot;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _SeriesContextProvider = require("../context/SeriesContextProvider");
var _PieArc = _interopRequireDefault(require("./PieArc"));
var _PieArcLabel = _interopRequireDefault(require("./PieArcLabel"));
var _DrawingProvider = require("../context/DrawingProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const RATIO = 180 / Math.PI;
function getItemLabel(arcLabel, arcLabelMinAngle, item) {
  if (!arcLabel) {
    return null;
  }
  const angle = (item.endAngle - item.startAngle) * RATIO;
  if (angle < arcLabelMinAngle) {
    return null;
  }
  if (typeof arcLabel === 'string') {
    return item[arcLabel]?.toString();
  }
  return arcLabel(item);
}
function PiePlot(props) {
  const {
    slots,
    slotProps,
    onClick
  } = props;
  const seriesData = React.useContext(_SeriesContextProvider.SeriesContext).pie;
  const {
    left,
    top,
    width,
    height
  } = React.useContext(_DrawingProvider.DrawingContext);
  if (seriesData === undefined) {
    return null;
  }
  const availableRadius = Math.min(width, height) / 2;
  const center = {
    x: left + width / 2,
    y: top + height / 2
  };
  const {
    series,
    seriesOrder
  } = seriesData;
  const Arc = slots?.pieArc ?? _PieArc.default;
  const ArcLabel = slots?.pieArcLabel ?? _PieArcLabel.default;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("g", {
    children: seriesOrder.map(seriesId => {
      const {
        innerRadius,
        outerRadius,
        cornerRadius,
        arcLabel,
        arcLabelMinAngle = 0,
        data,
        cx,
        cy,
        highlighted,
        faded
      } = series[seriesId];
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("g", {
        transform: `translate(${cx === undefined ? center.x : left + cx}, ${cy === undefined ? center.y : top + cy})`,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("g", {
          children: [data.map((item, index) => {
            return /*#__PURE__*/(0, _react.createElement)(Arc, (0, _extends2.default)({}, item, {
              key: item.id,
              innerRadius: innerRadius,
              outerRadius: outerRadius ?? availableRadius,
              cornerRadius: cornerRadius,
              id: seriesId,
              color: item.color,
              dataIndex: index,
              highlightScope: series[seriesId].highlightScope,
              highlighted: highlighted,
              faded: faded,
              onClick: onClick && (event => {
                onClick(event, {
                  type: 'pie',
                  seriesId,
                  dataIndex: index
                }, item);
              })
            }, slotProps?.pieArc));
          }), data.map((item, index) => {
            return /*#__PURE__*/(0, _react.createElement)(ArcLabel, (0, _extends2.default)({}, item, {
              key: item.id,
              innerRadius: innerRadius,
              outerRadius: outerRadius ?? availableRadius,
              cornerRadius: cornerRadius,
              id: seriesId,
              color: item.color,
              dataIndex: index,
              highlightScope: series[seriesId].highlightScope,
              formattedArcLabel: getItemLabel(arcLabel, arcLabelMinAngle, item)
            }, slotProps?.pieArcLabel));
          })]
        })
      }, seriesId);
    })
  });
}
process.env.NODE_ENV !== "production" ? PiePlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when a pie item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {PieItemIdentifier} pieItemIdentifier The pie item identifier.
   * @param {DefaultizedPieValueType} item The pie item.
   */
  onClick: _propTypes.default.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: _propTypes.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: _propTypes.default.object
} : void 0;