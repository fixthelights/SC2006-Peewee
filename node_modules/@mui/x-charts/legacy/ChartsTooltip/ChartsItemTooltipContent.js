import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { useSlotProps } from '@mui/base/utils';
import { SeriesContext } from '../context/SeriesContextProvider';
import { ChartsTooltipTable, ChartsTooltipCell, ChartsTooltipMark, ChartsTooltipPaper, ChartsTooltipRow } from './ChartsTooltipTable';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export function DefaultChartsItemContent(props) {
  var series = props.series,
    itemData = props.itemData,
    sx = props.sx,
    classes = props.classes;
  if (itemData.dataIndex === undefined) {
    return null;
  }
  var _ref = series.type === 'pie' ? {
      color: series.data[itemData.dataIndex].color,
      displayedLabel: series.data[itemData.dataIndex].label
    } : {
      color: series.color,
      displayedLabel: series.label
    },
    displayedLabel = _ref.displayedLabel,
    color = _ref.color;

  // TODO: Manage to let TS understand series.data and series.valueFormatter are coherent
  // @ts-ignore
  var formattedValue = series.valueFormatter(series.data[itemData.dataIndex]);
  return /*#__PURE__*/_jsx(ChartsTooltipPaper, {
    sx: sx,
    className: classes.root,
    children: /*#__PURE__*/_jsx(ChartsTooltipTable, {
      children: /*#__PURE__*/_jsx("tbody", {
        children: /*#__PURE__*/_jsxs(ChartsTooltipRow, {
          children: [/*#__PURE__*/_jsx(ChartsTooltipCell, {
            className: classes.markCell,
            children: /*#__PURE__*/_jsx(ChartsTooltipMark, {
              ownerState: {
                color: color
              }
            })
          }), /*#__PURE__*/_jsx(ChartsTooltipCell, {
            className: classes.labelCell,
            children: displayedLabel
          }), /*#__PURE__*/_jsx(ChartsTooltipCell, {
            className: classes.valueCell,
            children: formattedValue
          })]
        })
      })
    })
  });
}
export function ChartsItemTooltipContent(props) {
  var content = props.content,
    itemData = props.itemData,
    sx = props.sx,
    classes = props.classes,
    contentProps = props.contentProps;
  var series = React.useContext(SeriesContext)[itemData.type].series[itemData.seriesId];
  var Content = content != null ? content : DefaultChartsItemContent;
  var chartTooltipContentProps = useSlotProps({
    elementType: Content,
    externalSlotProps: contentProps,
    additionalProps: {
      itemData: itemData,
      series: series,
      sx: sx,
      classes: classes
    },
    ownerState: {}
  });
  return /*#__PURE__*/_jsx(Content, _extends({}, chartTooltipContentProps));
}