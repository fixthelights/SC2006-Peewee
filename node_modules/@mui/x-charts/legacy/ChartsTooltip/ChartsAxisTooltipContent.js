import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import Typography from '@mui/material/Typography';
import { useSlotProps } from '@mui/base/utils';
import { SeriesContext } from '../context/SeriesContextProvider';
import { CartesianContext } from '../context/CartesianContextProvider';
import { ChartsTooltipCell, ChartsTooltipPaper, ChartsTooltipTable, ChartsTooltipMark, ChartsTooltipRow } from './ChartsTooltipTable';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export function DefaultChartsAxisContent(props) {
  var _axis$valueFormatter;
  var series = props.series,
    axis = props.axis,
    dataIndex = props.dataIndex,
    axisValue = props.axisValue,
    sx = props.sx,
    classes = props.classes;
  if (dataIndex == null) {
    return null;
  }
  var axisFormatter = (_axis$valueFormatter = axis.valueFormatter) != null ? _axis$valueFormatter : function (v) {
    return v.toLocaleString();
  };
  return /*#__PURE__*/_jsx(ChartsTooltipPaper, {
    sx: sx,
    className: classes.root,
    children: /*#__PURE__*/_jsxs(ChartsTooltipTable, {
      children: [axisValue != null && !axis.hideTooltip && /*#__PURE__*/_jsx("thead", {
        children: /*#__PURE__*/_jsx(ChartsTooltipRow, {
          children: /*#__PURE__*/_jsx(ChartsTooltipCell, {
            colSpan: 3,
            children: /*#__PURE__*/_jsx(Typography, {
              children: axisFormatter(axisValue)
            })
          })
        })
      }), /*#__PURE__*/_jsx("tbody", {
        children: series.map(function (_ref) {
          var color = _ref.color,
            id = _ref.id,
            label = _ref.label,
            valueFormatter = _ref.valueFormatter,
            data = _ref.data;
          return /*#__PURE__*/_jsxs(ChartsTooltipRow, {
            children: [/*#__PURE__*/_jsx(ChartsTooltipCell, {
              className: classes.markCell,
              children: /*#__PURE__*/_jsx(ChartsTooltipMark, {
                ownerState: {
                  color: color
                },
                boxShadow: 1
              })
            }), /*#__PURE__*/_jsx(ChartsTooltipCell, {
              className: classes.labelCell,
              children: label ? /*#__PURE__*/_jsx(Typography, {
                children: label
              }) : null
            }), /*#__PURE__*/_jsx(ChartsTooltipCell, {
              className: classes.valueCell,
              children: /*#__PURE__*/_jsx(Typography, {
                children: valueFormatter(data[dataIndex])
              })
            })]
          }, id);
        })
      })]
    })
  });
}
export function ChartsAxisTooltipContent(props) {
  var content = props.content,
    contentProps = props.contentProps,
    axisData = props.axisData,
    sx = props.sx,
    classes = props.classes;
  var isXaxis = (axisData.x && axisData.x.index) !== undefined;
  var dataIndex = isXaxis ? axisData.x && axisData.x.index : axisData.y && axisData.y.index;
  var axisValue = isXaxis ? axisData.x && axisData.x.value : axisData.y && axisData.y.value;
  var _React$useContext = React.useContext(CartesianContext),
    xAxisIds = _React$useContext.xAxisIds,
    xAxis = _React$useContext.xAxis,
    yAxisIds = _React$useContext.yAxisIds,
    yAxis = _React$useContext.yAxis;
  var series = React.useContext(SeriesContext);
  var USED_AXIS_ID = isXaxis ? xAxisIds[0] : yAxisIds[0];
  var relevantSeries = React.useMemo(function () {
    var rep = [];
    Object.keys(series).filter(function (seriesType) {
      return ['bar', 'line', 'scatter'].includes(seriesType);
    }).forEach(function (seriesType) {
      series[seriesType].seriesOrder.forEach(function (seriesId) {
        var item = series[seriesType].series[seriesId];
        var axisKey = isXaxis ? item.xAxisKey : item.yAxisKey;
        if (axisKey === undefined || axisKey === USED_AXIS_ID) {
          rep.push(series[seriesType].series[seriesId]);
        }
      });
    });
    return rep;
  }, [USED_AXIS_ID, isXaxis, series]);
  var relevantAxis = React.useMemo(function () {
    return isXaxis ? xAxis[USED_AXIS_ID] : yAxis[USED_AXIS_ID];
  }, [USED_AXIS_ID, isXaxis, xAxis, yAxis]);
  var Content = content != null ? content : DefaultChartsAxisContent;
  var chartTooltipContentProps = useSlotProps({
    elementType: Content,
    externalSlotProps: contentProps,
    additionalProps: {
      axisData: axisData,
      series: relevantSeries,
      axis: relevantAxis,
      dataIndex: dataIndex,
      axisValue: axisValue,
      sx: sx,
      classes: classes
    },
    ownerState: {}
  });
  return /*#__PURE__*/_jsx(Content, _extends({}, chartTooltipContentProps));
}