import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
var _excluded = ["x", "y", "textAnchor", "dominantBaseline", "style", "text", "ownerState"];
import * as React from 'react';
import { getStringSize } from '../domUtils';
import { jsx as _jsx } from "react/jsx-runtime";
export function getWordsByLines(_ref) {
  var style = _ref.style,
    needsComputation = _ref.needsComputation,
    text = _ref.text;
  return text.split('\n').map(function (subText) {
    return _extends({
      text: subText
    }, needsComputation ? getStringSize(subText, style) : {
      width: 0,
      height: 0
    });
  });
}
export function ChartsText(props) {
  var x = props.x,
    y = props.y,
    _props$textAnchor = props.textAnchor,
    textAnchor = _props$textAnchor === void 0 ? 'start' : _props$textAnchor,
    _props$dominantBaseli = props.dominantBaseline,
    dominantBaseline = _props$dominantBaseli === void 0 ? 'central' : _props$dominantBaseli,
    style = props.style,
    text = props.text,
    ownerState = props.ownerState,
    textProps = _objectWithoutProperties(props, _excluded);
  var wordsByLines = React.useMemo(function () {
    return getWordsByLines({
      style: style,
      needsComputation: text.includes('\n'),
      text: text
    });
  }, [style, text]);
  var startDy;
  switch (dominantBaseline) {
    case 'hanging':
      startDy = 0;
      break;
    case 'central':
      startDy = (wordsByLines.length - 1) / 2 * -wordsByLines[0].height;
      break;
    default:
      startDy = (wordsByLines.length - 1) * -wordsByLines[0].height;
      break;
  }

  // const transforms = [];
  // if (scaleToFit) {
  //   const lineWidth = wordsByLines[0].width;
  //   transforms.push(`scale(${(isNumber(width as number) ? (width as number) / lineWidth : 1) / lineWidth})`);
  // }
  // if (angle) {
  //   transforms.push(`rotate(${angle}, ${x}, ${y})`);
  // }
  // if (transforms.length) {
  //   textProps.transform = transforms.join(' ');
  // }

  return /*#__PURE__*/_jsx("text", _extends({}, textProps, {
    x: x,
    y: y,
    textAnchor: textAnchor,
    dominantBaseline: dominantBaseline,
    style: style,
    children: wordsByLines.map(function (line, index) {
      return /*#__PURE__*/_jsx("tspan", {
        x: x,
        dy: "".concat(index === 0 ? startDy : wordsByLines[0].height, "px"),
        children: line.text
      }, index);
    })
  }));
}