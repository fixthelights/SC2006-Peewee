import * as React from 'react';
import PropTypes from 'prop-types';
import { InteractionContext } from '../context/InteractionProvider';
import { CartesianContext } from '../context/CartesianContextProvider';
import { getValueToPositionMapper } from '../hooks/useScale';
import { isBandScale } from '../internals/isBandScale';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function ChartsAxisHighlight(props) {
  var xAxisHighlight = props.x,
    yAxisHighlight = props.y;
  var _React$useContext = React.useContext(CartesianContext),
    xAxisIds = _React$useContext.xAxisIds,
    xAxis = _React$useContext.xAxis,
    yAxisIds = _React$useContext.yAxisIds,
    yAxis = _React$useContext.yAxis;
  var USED_X_AXIS_ID = xAxisIds[0];
  var USED_Y_AXIS_ID = yAxisIds[0];
  var xScale = xAxis[USED_X_AXIS_ID].scale;
  var yScale = yAxis[USED_Y_AXIS_ID].scale;
  var _React$useContext2 = React.useContext(InteractionContext),
    axis = _React$useContext2.axis;
  var getXPosition = getValueToPositionMapper(xScale);
  var getYPosition = getValueToPositionMapper(yScale);
  return /*#__PURE__*/_jsxs(React.Fragment, {
    children: [xAxisHighlight === 'band' && axis.x !== null && isBandScale(xScale) && /*#__PURE__*/_jsx("path", {
      d: "M ".concat(xScale(axis.x.value) - (xScale.step() - xScale.bandwidth()) / 2, " ").concat(yScale.range()[0], " l ").concat(xScale.step(), " 0 l 0 ").concat(yScale.range()[1] - yScale.range()[0], " l ").concat(-xScale.step(), " 0 Z"),
      fill: "gray",
      fillOpacity: 0.1,
      style: {
        pointerEvents: 'none'
      }
    }), yAxisHighlight === 'band' && axis.y !== null && isBandScale(yScale) && /*#__PURE__*/_jsx("path", {
      d: "M ".concat(xScale.range()[0], " ").concat(yScale(axis.y.value) - (yScale.step() - yScale.bandwidth()) / 2, " l 0 ").concat(yScale.step(), " l ").concat(xScale.range()[1] - xScale.range()[0], " 0 l 0 ").concat(-yScale.step(), " Z"),
      fill: "gray",
      fillOpacity: 0.1,
      style: {
        pointerEvents: 'none'
      }
    }), xAxisHighlight === 'line' && axis.x !== null && /*#__PURE__*/_jsx("path", {
      d: "M ".concat(getXPosition(axis.x.value), " ").concat(yScale.range()[0], " L ").concat(getXPosition(axis.x.value), " ").concat(yScale.range()[1]),
      stroke: "black",
      strokeDasharray: "5 2",
      style: {
        pointerEvents: 'none'
      }
    }), yAxisHighlight === 'line' && axis.y !== null && /*#__PURE__*/_jsx("path", {
      d: "M ".concat(xScale.range()[0], " ").concat(getYPosition(axis.y.value), " L ").concat(xScale.range()[1], " ").concat(getYPosition(axis.y.value)),
      stroke: "black",
      strokeDasharray: "5 2",
      style: {
        pointerEvents: 'none'
      }
    })]
  });
}
process.env.NODE_ENV !== "production" ? ChartsAxisHighlight.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  x: PropTypes.oneOf(['band', 'line', 'none']),
  y: PropTypes.oneOf(['band', 'line', 'none'])
} : void 0;
export { ChartsAxisHighlight };