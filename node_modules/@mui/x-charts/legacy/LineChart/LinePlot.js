import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["slots", "slotProps"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { line as d3Line } from 'd3-shape';
import { SeriesContext } from '../context/SeriesContextProvider';
import { CartesianContext } from '../context/CartesianContextProvider';
import { LineElement } from './LineElement';
import { getValueToPositionMapper } from '../hooks/useScale';
import getCurveFactory from '../internals/getCurve';
import { jsx as _jsx } from "react/jsx-runtime";
function LinePlot(props) {
  var slots = props.slots,
    slotProps = props.slotProps,
    other = _objectWithoutProperties(props, _excluded);
  var seriesData = React.useContext(SeriesContext).line;
  var axisData = React.useContext(CartesianContext);
  if (seriesData === undefined) {
    return null;
  }
  var series = seriesData.series,
    stackingGroups = seriesData.stackingGroups;
  var xAxis = axisData.xAxis,
    yAxis = axisData.yAxis,
    xAxisIds = axisData.xAxisIds,
    yAxisIds = axisData.yAxisIds;
  var defaultXAxisId = xAxisIds[0];
  var defaultYAxisId = yAxisIds[0];
  return /*#__PURE__*/_jsx("g", _extends({}, other, {
    children: stackingGroups.flatMap(function (_ref) {
      var groupIds = _ref.ids;
      return groupIds.flatMap(function (seriesId) {
        var _series$seriesId = series[seriesId],
          _series$seriesId$xAxi = _series$seriesId.xAxisKey,
          xAxisKey = _series$seriesId$xAxi === void 0 ? defaultXAxisId : _series$seriesId$xAxi,
          _series$seriesId$yAxi = _series$seriesId.yAxisKey,
          yAxisKey = _series$seriesId$yAxi === void 0 ? defaultYAxisId : _series$seriesId$yAxi,
          stackedData = _series$seriesId.stackedData;
        var xScale = getValueToPositionMapper(xAxis[xAxisKey].scale);
        var yScale = yAxis[yAxisKey].scale;
        var xData = xAxis[xAxisKey].data;
        if (xData === undefined) {
          throw new Error("Axis of id \"".concat(xAxisKey, "\" should have data property to be able to display a line plot"));
        }
        var linePath = d3Line().x(function (d) {
          return xScale(d.x);
        }).y(function (d) {
          return yScale(d.y[1]);
        });
        if (process.env.NODE_ENV !== 'production') {
          if (xData.length !== stackedData.length) {
            throw new Error("MUI: data length of the x axis (".concat(xData.length, " items) does not match length of series (").concat(stackedData.length, " items)"));
          }
        }
        var curve = getCurveFactory(series[seriesId].curve);
        var d3Data = xData == null ? void 0 : xData.map(function (x, index) {
          var _stackedData$index;
          return {
            x: x,
            y: (_stackedData$index = stackedData[index]) != null ? _stackedData$index : [0, 0]
          };
        });
        return /*#__PURE__*/_jsx(LineElement, {
          id: seriesId,
          d: linePath.curve(curve)(d3Data) || undefined,
          color: series[seriesId].color,
          highlightScope: series[seriesId].highlightScope,
          slots: slots,
          slotProps: slotProps
        }, seriesId);
      });
    })
  }));
}
process.env.NODE_ENV !== "production" ? LinePlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: PropTypes.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: PropTypes.object
} : void 0;
export { LinePlot };