import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { stack as d3Stack } from 'd3-shape';
import { getStackingGroups } from '../internals/stackSeries';
import defaultizeValueFormatter from '../internals/defaultizeValueFormatter';
// For now it's a copy past of bar charts formatter, but maybe will diverge later
var formatter = function formatter(params, dataset) {
  var seriesOrder = params.seriesOrder,
    series = params.series;
  var stackingGroups = getStackingGroups(params);

  // Create a data set with format adapted to d3
  var d3Dataset = dataset != null ? dataset : [];
  seriesOrder.forEach(function (id) {
    var data = series[id].data;
    if (data !== undefined) {
      data.forEach(function (value, index) {
        if (d3Dataset.length <= index) {
          d3Dataset.push(_defineProperty({}, id, value));
        } else {
          d3Dataset[index][id] = value;
        }
      });
    } else if (dataset === undefined) {
      throw new Error(["MUI: line series with id='".concat(id, "' has no data."), 'Either provide a data property to the series or use the dataset prop.'].join('\n'));
    }
  });
  var completedSeries = {};
  stackingGroups.forEach(function (stackingGroup) {
    // Get stacked values, and derive the domain
    var ids = stackingGroup.ids,
      stackingOrder = stackingGroup.stackingOrder,
      stackingOffset = stackingGroup.stackingOffset;
    var stackedSeries = d3Stack().keys(ids.map(function (id) {
      // Use dataKey if needed and available
      var dataKey = series[id].dataKey;
      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;
    })).order(stackingOrder).offset(stackingOffset)(d3Dataset);
    ids.forEach(function (id, index) {
      var dataKey = series[id].dataKey;
      completedSeries[id] = _extends({}, series[id], {
        data: dataKey ? dataset.map(function (d) {
          return d[dataKey];
        }) : series[id].data,
        stackedData: stackedSeries[index].map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
            a = _ref2[0],
            b = _ref2[1];
          return [a, b];
        })
      });
    });
  });
  return {
    seriesOrder: seriesOrder,
    stackingGroups: stackingGroups,
    series: defaultizeValueFormatter(completedSeries, function (v) {
      return v.toLocaleString();
    })
  };
};
export default formatter;