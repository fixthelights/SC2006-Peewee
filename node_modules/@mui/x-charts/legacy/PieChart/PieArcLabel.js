import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["id", "dataIndex", "classes", "color", "highlightScope", "innerRadius", "outerRadius", "cornerRadius", "formattedArcLabel"];
import * as React from 'react';
import { arc as d3Arc } from 'd3-shape';
import PropTypes from 'prop-types';
import composeClasses from '@mui/utils/composeClasses';
import generateUtilityClass from '@mui/utils/generateUtilityClass';
import { styled } from '@mui/material/styles';
import generateUtilityClasses from '@mui/utils/generateUtilityClasses';
import { InteractionContext } from '../context/InteractionProvider';
import { getIsFaded, getIsHighlighted } from '../hooks/useInteractionItemProps';
import { jsx as _jsx } from "react/jsx-runtime";
export function getPieArcLabelUtilityClass(slot) {
  return generateUtilityClass('MuiPieArcLabel', slot);
}
export var pieArcLabelClasses = generateUtilityClasses('MuiPieArcLabel', ['root', 'highlighted', 'faded']);
var useUtilityClasses = function useUtilityClasses(ownerState) {
  var classes = ownerState.classes,
    id = ownerState.id,
    isFaded = ownerState.isFaded,
    isHighlighted = ownerState.isHighlighted;
  var slots = {
    root: ['root', "series-".concat(id), isHighlighted && 'highlighted', isFaded && 'faded']
  };
  return composeClasses(slots, getPieArcLabelUtilityClass, classes);
};
var PieArcLabelRoot = styled('text', {
  name: 'MuiPieArcLabel',
  slot: 'Root',
  overridesResolver: function overridesResolver(_, styles) {
    return styles.root;
  }
})(function (_ref) {
  var theme = _ref.theme;
  return {
    fill: (theme.vars || theme).palette.text.primary,
    textAnchor: 'middle'
  };
});
export default function PieArcLabel(props) {
  var id = props.id,
    dataIndex = props.dataIndex,
    innerClasses = props.classes,
    color = props.color,
    highlightScope = props.highlightScope,
    _props$innerRadius = props.innerRadius,
    innerRadius = _props$innerRadius === void 0 ? 0 : _props$innerRadius,
    outerRadius = props.outerRadius,
    _props$cornerRadius = props.cornerRadius,
    cornerRadius = _props$cornerRadius === void 0 ? 0 : _props$cornerRadius,
    formattedArcLabel = props.formattedArcLabel,
    other = _objectWithoutProperties(props, _excluded);
  var _React$useContext = React.useContext(InteractionContext),
    item = _React$useContext.item;
  var isHighlighted = getIsHighlighted(item, {
    type: 'pie',
    seriesId: id,
    dataIndex: dataIndex
  }, highlightScope);
  var isFaded = !isHighlighted && getIsFaded(item, {
    type: 'pie',
    seriesId: id,
    dataIndex: dataIndex
  }, highlightScope);
  var ownerState = {
    id: id,
    dataIndex: dataIndex,
    classes: innerClasses,
    color: color,
    isFaded: isFaded,
    isHighlighted: isHighlighted
  };
  var classes = useUtilityClasses(ownerState);
  var arcLabelPosition = formattedArcLabel ? d3Arc().cornerRadius(cornerRadius).centroid(_extends({}, other, {
    innerRadius: innerRadius,
    outerRadius: outerRadius
  })) : [0, 0];
  return /*#__PURE__*/_jsx(PieArcLabelRoot, {
    className: classes.root,
    x: arcLabelPosition[0],
    y: arcLabelPosition[1],
    children: formattedArcLabel
  });
}
process.env.NODE_ENV !== "production" ? PieArcLabel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  classes: PropTypes.object,
  cornerRadius: PropTypes.number,
  dataIndex: PropTypes.number.isRequired,
  highlightScope: PropTypes.shape({
    faded: PropTypes.oneOf(['global', 'none', 'series']),
    highlighted: PropTypes.oneOf(['item', 'none', 'series'])
  }),
  innerRadius: PropTypes.number,
  outerRadius: PropTypes.number.isRequired
} : void 0;