import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import PropTypes from 'prop-types';
import { SeriesContext } from '../context/SeriesContextProvider';
import PieArc from './PieArc';
import PieArcLabel from './PieArcLabel';
import { DrawingContext } from '../context/DrawingProvider';
import { createElement as _createElement } from "react";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { jsx as _jsx } from "react/jsx-runtime";
var RATIO = 180 / Math.PI;
function getItemLabel(arcLabel, arcLabelMinAngle, item) {
  if (!arcLabel) {
    return null;
  }
  var angle = (item.endAngle - item.startAngle) * RATIO;
  if (angle < arcLabelMinAngle) {
    return null;
  }
  if (typeof arcLabel === 'string') {
    var _item$arcLabel;
    return (_item$arcLabel = item[arcLabel]) == null ? void 0 : _item$arcLabel.toString();
  }
  return arcLabel(item);
}
function PiePlot(props) {
  var _slots$pieArc, _slots$pieArcLabel;
  var slots = props.slots,
    slotProps = props.slotProps,
    onClick = props.onClick;
  var seriesData = React.useContext(SeriesContext).pie;
  var _React$useContext = React.useContext(DrawingContext),
    left = _React$useContext.left,
    top = _React$useContext.top,
    width = _React$useContext.width,
    height = _React$useContext.height;
  if (seriesData === undefined) {
    return null;
  }
  var availableRadius = Math.min(width, height) / 2;
  var center = {
    x: left + width / 2,
    y: top + height / 2
  };
  var series = seriesData.series,
    seriesOrder = seriesData.seriesOrder;
  var Arc = (_slots$pieArc = slots == null ? void 0 : slots.pieArc) != null ? _slots$pieArc : PieArc;
  var ArcLabel = (_slots$pieArcLabel = slots == null ? void 0 : slots.pieArcLabel) != null ? _slots$pieArcLabel : PieArcLabel;
  return /*#__PURE__*/_jsx("g", {
    children: seriesOrder.map(function (seriesId) {
      var _series$seriesId = series[seriesId],
        innerRadius = _series$seriesId.innerRadius,
        outerRadius = _series$seriesId.outerRadius,
        cornerRadius = _series$seriesId.cornerRadius,
        arcLabel = _series$seriesId.arcLabel,
        _series$seriesId$arcL = _series$seriesId.arcLabelMinAngle,
        arcLabelMinAngle = _series$seriesId$arcL === void 0 ? 0 : _series$seriesId$arcL,
        data = _series$seriesId.data,
        cx = _series$seriesId.cx,
        cy = _series$seriesId.cy,
        highlighted = _series$seriesId.highlighted,
        faded = _series$seriesId.faded;
      return /*#__PURE__*/_jsx("g", {
        transform: "translate(".concat(cx === undefined ? center.x : left + cx, ", ").concat(cy === undefined ? center.y : top + cy, ")"),
        children: /*#__PURE__*/_jsxs("g", {
          children: [data.map(function (item, index) {
            return /*#__PURE__*/_createElement(Arc, _extends({}, item, {
              key: item.id,
              innerRadius: innerRadius,
              outerRadius: outerRadius != null ? outerRadius : availableRadius,
              cornerRadius: cornerRadius,
              id: seriesId,
              color: item.color,
              dataIndex: index,
              highlightScope: series[seriesId].highlightScope,
              highlighted: highlighted,
              faded: faded,
              onClick: onClick && function (event) {
                onClick(event, {
                  type: 'pie',
                  seriesId: seriesId,
                  dataIndex: index
                }, item);
              }
            }, slotProps == null ? void 0 : slotProps.pieArc));
          }), data.map(function (item, index) {
            return /*#__PURE__*/_createElement(ArcLabel, _extends({}, item, {
              key: item.id,
              innerRadius: innerRadius,
              outerRadius: outerRadius != null ? outerRadius : availableRadius,
              cornerRadius: cornerRadius,
              id: seriesId,
              color: item.color,
              dataIndex: index,
              highlightScope: series[seriesId].highlightScope,
              formattedArcLabel: getItemLabel(arcLabel, arcLabelMinAngle, item)
            }, slotProps == null ? void 0 : slotProps.pieArcLabel));
          })]
        })
      }, seriesId);
    })
  });
}
process.env.NODE_ENV !== "production" ? PiePlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when a pie item is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {PieItemIdentifier} pieItemIdentifier The pie item identifier.
   * @param {DefaultizedPieValueType} item The pie item.
   */
  onClick: PropTypes.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: PropTypes.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: PropTypes.object
} : void 0;
export { PiePlot };