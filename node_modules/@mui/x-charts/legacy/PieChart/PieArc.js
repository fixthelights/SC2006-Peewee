import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["id", "dataIndex", "classes", "color", "highlightScope", "innerRadius", "outerRadius", "cornerRadius", "highlighted", "faded", "onClick"];
import * as React from 'react';
import { arc as d3Arc } from 'd3-shape';
import PropTypes from 'prop-types';
import composeClasses from '@mui/utils/composeClasses';
import generateUtilityClass from '@mui/utils/generateUtilityClass';
import { styled } from '@mui/material/styles';
import generateUtilityClasses from '@mui/utils/generateUtilityClasses';
import { InteractionContext } from '../context/InteractionProvider';
import { getIsFaded, getIsHighlighted, useInteractionItemProps } from '../hooks/useInteractionItemProps';
import { jsx as _jsx } from "react/jsx-runtime";
export function getPieArcUtilityClass(slot) {
  return generateUtilityClass('MuiPieArc', slot);
}
export var pieArcClasses = generateUtilityClasses('MuiPieArc', ['root', 'highlighted', 'faded']);
var useUtilityClasses = function useUtilityClasses(ownerState) {
  var classes = ownerState.classes,
    id = ownerState.id,
    isFaded = ownerState.isFaded,
    isHighlighted = ownerState.isHighlighted;
  var slots = {
    root: ['root', "series-".concat(id), isHighlighted && 'highlighted', isFaded && 'faded']
  };
  return composeClasses(slots, getPieArcUtilityClass, classes);
};
var PieArcRoot = styled('path', {
  name: 'MuiPieArc',
  slot: 'Root',
  overridesResolver: function overridesResolver(_, styles) {
    return styles.arc;
  }
})(function (_ref) {
  var ownerState = _ref.ownerState,
    theme = _ref.theme;
  return {
    stroke: (theme.vars || theme).palette.background.paper,
    strokeWidth: 1,
    strokeLinejoin: 'round',
    fill: ownerState.color,
    opacity: ownerState.isFaded ? 0.3 : 1
  };
});
export default function PieArc(props) {
  var _attibuesOverride$inn, _attibuesOverride$out, _attibuesOverride$cor;
  var id = props.id,
    dataIndex = props.dataIndex,
    innerClasses = props.classes,
    color = props.color,
    highlightScope = props.highlightScope,
    _props$innerRadius = props.innerRadius,
    baseInnerRadius = _props$innerRadius === void 0 ? 0 : _props$innerRadius,
    baseOuterRadius = props.outerRadius,
    _props$cornerRadius = props.cornerRadius,
    baseCornerRadius = _props$cornerRadius === void 0 ? 0 : _props$cornerRadius,
    highlighted = props.highlighted,
    _props$faded = props.faded,
    faded = _props$faded === void 0 ? {
      additionalRadius: -5
    } : _props$faded,
    onClick = props.onClick,
    other = _objectWithoutProperties(props, _excluded);
  var getInteractionItemProps = useInteractionItemProps(highlightScope);
  var _React$useContext = React.useContext(InteractionContext),
    item = _React$useContext.item;
  var isHighlighted = getIsHighlighted(item, {
    type: 'pie',
    seriesId: id,
    dataIndex: dataIndex
  }, highlightScope);
  var isFaded = !isHighlighted && getIsFaded(item, {
    type: 'pie',
    seriesId: id,
    dataIndex: dataIndex
  }, highlightScope);
  var ownerState = {
    id: id,
    dataIndex: dataIndex,
    classes: innerClasses,
    color: color,
    isFaded: isFaded,
    isHighlighted: isHighlighted
  };
  var classes = useUtilityClasses(ownerState);
  var attibuesOverride = _extends({
    additionalRadius: 0
  }, isFaded && faded || isHighlighted && highlighted || {});
  var innerRadius = Math.max(0, (_attibuesOverride$inn = attibuesOverride.innerRadius) != null ? _attibuesOverride$inn : baseInnerRadius);
  var outerRadius = Math.max(0, (_attibuesOverride$out = attibuesOverride.outerRadius) != null ? _attibuesOverride$out : baseOuterRadius + attibuesOverride.additionalRadius);
  var cornerRadius = (_attibuesOverride$cor = attibuesOverride.cornerRadius) != null ? _attibuesOverride$cor : baseCornerRadius;
  return /*#__PURE__*/_jsx(PieArcRoot, _extends({
    d: d3Arc().cornerRadius(cornerRadius)(_extends({}, other, {
      innerRadius: innerRadius,
      outerRadius: outerRadius
    })),
    onClick: onClick,
    cursor: onClick ? 'pointer' : 'unset',
    ownerState: ownerState,
    className: classes.root
  }, getInteractionItemProps({
    type: 'pie',
    seriesId: id,
    dataIndex: dataIndex
  })));
}
process.env.NODE_ENV !== "production" ? PieArc.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  classes: PropTypes.object,
  cornerRadius: PropTypes.number,
  dataIndex: PropTypes.number.isRequired,
  highlightScope: PropTypes.shape({
    faded: PropTypes.oneOf(['global', 'none', 'series']),
    highlighted: PropTypes.oneOf(['item', 'none', 'series'])
  }),
  innerRadius: PropTypes.number,
  outerRadius: PropTypes.number.isRequired
} : void 0;