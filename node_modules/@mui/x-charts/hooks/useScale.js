"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getValueToPositionMapper = getValueToPositionMapper;
exports.useXScale = useXScale;
exports.useYScale = useYScale;
var React = _interopRequireWildcard(require("react"));
var _CartesianContextProvider = require("../context/CartesianContextProvider");
var _isBandScale = require("../internals/isBandScale");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * For a given scale return a function that map value to their position.
 * Usefull when dealing with specific scale such as band.
 * @param scale The scale to use
 * @returns (value: any) => number
 */
function getValueToPositionMapper(scale) {
  if ((0, _isBandScale.isBandScale)(scale)) {
    return value => scale(value) + scale.bandwidth() / 2;
  }
  return value => scale(value);
}
function useXScale(identifier) {
  const {
    xAxis,
    xAxisIds
  } = React.useContext(_CartesianContextProvider.CartesianContext);
  const id = typeof identifier === 'string' ? identifier : xAxisIds[identifier ?? 0];
  return xAxis[id].scale;
}
function useYScale(identifier) {
  const {
    yAxis,
    yAxisIds
  } = React.useContext(_CartesianContextProvider.CartesianContext);
  const id = typeof identifier === 'string' ? identifier : yAxisIds[identifier ?? 0];
  return yAxis[id].scale;
}