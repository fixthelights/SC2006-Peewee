"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useInteractionItemProps = exports.getIsHighlighted = exports.getIsFaded = void 0;
var React = _interopRequireWildcard(require("react"));
var _InteractionProvider = require("../context/InteractionProvider");
var _HighlightProvider = require("../context/HighlightProvider");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const useInteractionItemProps = scope => {
  const {
    dispatch: dispatchInteraction
  } = React.useContext(_InteractionProvider.InteractionContext);
  const {
    dispatch: dispatchHighlight
  } = React.useContext(_HighlightProvider.HighlighContext);
  const getInteractionItemProps = data => {
    const onMouseEnter = () => {
      dispatchInteraction({
        type: 'enterItem',
        data
      });
      dispatchHighlight({
        type: 'enterItem',
        item: data,
        scope
      });
    };
    const onMouseLeave = () => {
      dispatchInteraction({
        type: 'leaveItem',
        data
      });
      dispatchHighlight({
        type: 'leaveItem',
        item: data
      });
    };
    return {
      onMouseEnter,
      onMouseLeave
    };
  };
  return getInteractionItemProps;
};
exports.useInteractionItemProps = useInteractionItemProps;
const getIsHighlighted = (selectedItem, currentItem, highlightScope) => {
  if (!highlightScope?.highlighted || highlightScope.highlighted === 'none' || selectedItem === null) {
    return false;
  }
  const isSeriesSelected = selectedItem.type === currentItem.type && selectedItem.seriesId === currentItem.seriesId;
  if (!isSeriesSelected) {
    return false;
  }
  if (highlightScope.highlighted === 'series') {
    return isSeriesSelected;
  }
  return selectedItem.dataIndex !== undefined && selectedItem.dataIndex === currentItem.dataIndex;
};
exports.getIsHighlighted = getIsHighlighted;
const getIsFaded = (selectedItem, currentItem, highlightScope) => {
  if (!highlightScope?.faded || highlightScope.faded === 'none' || selectedItem === null) {
    return false;
  }
  const isSeriesSelected = selectedItem.type === currentItem.type && selectedItem.seriesId === currentItem.seriesId;
  if (highlightScope.faded === 'series') {
    return isSeriesSelected && selectedItem.dataIndex !== currentItem.dataIndex;
  }
  if (highlightScope.faded === 'global') {
    if (!isSeriesSelected) {
      return true;
    }
    return selectedItem.dataIndex !== undefined && selectedItem.dataIndex !== currentItem.dataIndex;
  }
  return false;
};
exports.getIsFaded = getIsFaded;