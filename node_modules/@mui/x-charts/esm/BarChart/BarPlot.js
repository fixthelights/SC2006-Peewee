import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import PropTypes from 'prop-types';
import { SeriesContext } from '../context/SeriesContextProvider';
import { CartesianContext } from '../context/CartesianContextProvider';
import { BarElement } from './BarElement';
import { isBandScaleConfig } from '../models/axis';

/**
 * Solution of the equations
 * W = barWidth * N + offset * (N-1)
 * offset / (offset + barWidth) = r
 * @param bandWidth The width available to place bars.
 * @param numberOfGroups The number of bars to place in that space.
 * @param gapRatio The ratio of the gap between bars over the bar width.
 * @returns The bar width and the offset between bars.
 */
import { jsx as _jsx } from "react/jsx-runtime";
function getBandSize({
  bandWidth: W,
  numberOfGroups: N,
  gapRatio: r
}) {
  if (r === 0) {
    return {
      barWidth: W / N,
      offset: 0
    };
  }
  const barWidth = W / (N + (N - 1) * r);
  const offset = r * barWidth;
  return {
    barWidth,
    offset
  };
}
function BarPlot(props) {
  const seriesData = React.useContext(SeriesContext).bar;
  const axisData = React.useContext(CartesianContext);
  if (seriesData === undefined) {
    return null;
  }
  const {
    series,
    stackingGroups
  } = seriesData;
  const {
    xAxis,
    yAxis,
    xAxisIds,
    yAxisIds
  } = axisData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  return /*#__PURE__*/_jsx(React.Fragment, {
    children: stackingGroups.flatMap(({
      ids: groupIds
    }, groupIndex) => {
      return groupIds.flatMap(seriesId => {
        var _series$seriesId$xAxi, _series$seriesId$yAxi;
        const xAxisKey = (_series$seriesId$xAxi = series[seriesId].xAxisKey) != null ? _series$seriesId$xAxi : defaultXAxisId;
        const yAxisKey = (_series$seriesId$yAxi = series[seriesId].yAxisKey) != null ? _series$seriesId$yAxi : defaultYAxisId;
        const xAxisConfig = xAxis[xAxisKey];
        const yAxisConfig = yAxis[yAxisKey];
        const verticalLayout = series[seriesId].layout === 'vertical';
        let baseScaleConfig;
        if (verticalLayout) {
          if (!isBandScaleConfig(xAxisConfig)) {
            throw new Error(`Axis with id "${xAxisKey}" shoud be of type "band" to display the bar series of id "${seriesId}"`);
          }
          if (xAxis[xAxisKey].data === undefined) {
            throw new Error(`Axis with id "${xAxisKey}" shoud have data property`);
          }
          baseScaleConfig = xAxisConfig;
        } else {
          if (!isBandScaleConfig(yAxisConfig)) {
            throw new Error(`Axis with id "${yAxisKey}" shoud be of type "band" to display the bar series of id "${seriesId}"`);
          }
          if (yAxis[yAxisKey].data === undefined) {
            throw new Error(`Axis with id "${xAxisKey}" shoud have data property`);
          }
          baseScaleConfig = yAxisConfig;
        }
        const xScale = xAxisConfig.scale;
        const yScale = yAxisConfig.scale;
        const bandWidth = baseScaleConfig.scale.bandwidth();
        const {
          barWidth,
          offset
        } = getBandSize({
          bandWidth,
          numberOfGroups: stackingGroups.length,
          gapRatio: baseScaleConfig.barGapRatio
        });
        const barOffset = groupIndex * (barWidth + offset);
        const {
          stackedData,
          color
        } = series[seriesId];
        return stackedData.map((values, dataIndex) => {
          var _xAxis$xAxisKey$data, _yAxis$yAxisKey$data;
          const baseline = Math.min(...values);
          const value = Math.max(...values);
          return /*#__PURE__*/_jsx(BarElement, _extends({
            id: seriesId,
            dataIndex: dataIndex,
            x: verticalLayout ? xScale((_xAxis$xAxisKey$data = xAxis[xAxisKey].data) == null ? void 0 : _xAxis$xAxisKey$data[dataIndex]) + barOffset : xScale(baseline),
            y: verticalLayout ? yScale(value) : yScale((_yAxis$yAxisKey$data = yAxis[yAxisKey].data) == null ? void 0 : _yAxis$yAxisKey$data[dataIndex]) + barOffset,
            height: verticalLayout ? Math.abs(yScale(baseline) - yScale(value)) : barWidth,
            width: verticalLayout ? barWidth : Math.abs(xScale(baseline) - xScale(value)),
            color: color,
            highlightScope: series[seriesId].highlightScope
          }, props), `${seriesId}-${dataIndex}`);
        });
      });
    })
  });
}
process.env.NODE_ENV !== "production" ? BarPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: PropTypes.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: PropTypes.object
} : void 0;
export { BarPlot };