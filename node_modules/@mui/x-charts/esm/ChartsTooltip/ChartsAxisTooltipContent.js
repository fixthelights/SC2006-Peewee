import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import Typography from '@mui/material/Typography';
import { useSlotProps } from '@mui/base/utils';
import { SeriesContext } from '../context/SeriesContextProvider';
import { CartesianContext } from '../context/CartesianContextProvider';
import { ChartsTooltipCell, ChartsTooltipPaper, ChartsTooltipTable, ChartsTooltipMark, ChartsTooltipRow } from './ChartsTooltipTable';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export function DefaultChartsAxisContent(props) {
  var _axis$valueFormatter;
  const {
    series,
    axis,
    dataIndex,
    axisValue,
    sx,
    classes
  } = props;
  if (dataIndex == null) {
    return null;
  }
  const axisFormatter = (_axis$valueFormatter = axis.valueFormatter) != null ? _axis$valueFormatter : v => v.toLocaleString();
  return /*#__PURE__*/_jsx(ChartsTooltipPaper, {
    sx: sx,
    className: classes.root,
    children: /*#__PURE__*/_jsxs(ChartsTooltipTable, {
      children: [axisValue != null && !axis.hideTooltip && /*#__PURE__*/_jsx("thead", {
        children: /*#__PURE__*/_jsx(ChartsTooltipRow, {
          children: /*#__PURE__*/_jsx(ChartsTooltipCell, {
            colSpan: 3,
            children: /*#__PURE__*/_jsx(Typography, {
              children: axisFormatter(axisValue)
            })
          })
        })
      }), /*#__PURE__*/_jsx("tbody", {
        children: series.map(({
          color,
          id,
          label,
          valueFormatter,
          data
        }) => /*#__PURE__*/_jsxs(ChartsTooltipRow, {
          children: [/*#__PURE__*/_jsx(ChartsTooltipCell, {
            className: classes.markCell,
            children: /*#__PURE__*/_jsx(ChartsTooltipMark, {
              ownerState: {
                color
              },
              boxShadow: 1
            })
          }), /*#__PURE__*/_jsx(ChartsTooltipCell, {
            className: classes.labelCell,
            children: label ? /*#__PURE__*/_jsx(Typography, {
              children: label
            }) : null
          }), /*#__PURE__*/_jsx(ChartsTooltipCell, {
            className: classes.valueCell,
            children: /*#__PURE__*/_jsx(Typography, {
              children: valueFormatter(data[dataIndex])
            })
          })]
        }, id))
      })]
    })
  });
}
export function ChartsAxisTooltipContent(props) {
  const {
    content,
    contentProps,
    axisData,
    sx,
    classes
  } = props;
  const isXaxis = (axisData.x && axisData.x.index) !== undefined;
  const dataIndex = isXaxis ? axisData.x && axisData.x.index : axisData.y && axisData.y.index;
  const axisValue = isXaxis ? axisData.x && axisData.x.value : axisData.y && axisData.y.value;
  const {
    xAxisIds,
    xAxis,
    yAxisIds,
    yAxis
  } = React.useContext(CartesianContext);
  const series = React.useContext(SeriesContext);
  const USED_AXIS_ID = isXaxis ? xAxisIds[0] : yAxisIds[0];
  const relevantSeries = React.useMemo(() => {
    const rep = [];
    Object.keys(series).filter(seriesType => ['bar', 'line', 'scatter'].includes(seriesType)).forEach(seriesType => {
      series[seriesType].seriesOrder.forEach(seriesId => {
        const item = series[seriesType].series[seriesId];
        const axisKey = isXaxis ? item.xAxisKey : item.yAxisKey;
        if (axisKey === undefined || axisKey === USED_AXIS_ID) {
          rep.push(series[seriesType].series[seriesId]);
        }
      });
    });
    return rep;
  }, [USED_AXIS_ID, isXaxis, series]);
  const relevantAxis = React.useMemo(() => {
    return isXaxis ? xAxis[USED_AXIS_ID] : yAxis[USED_AXIS_ID];
  }, [USED_AXIS_ID, isXaxis, xAxis, yAxis]);
  const Content = content != null ? content : DefaultChartsAxisContent;
  const chartTooltipContentProps = useSlotProps({
    elementType: Content,
    externalSlotProps: contentProps,
    additionalProps: {
      axisData,
      series: relevantSeries,
      axis: relevantAxis,
      dataIndex,
      axisValue,
      sx,
      classes
    },
    ownerState: {}
  });
  return /*#__PURE__*/_jsx(Content, _extends({}, chartTooltipContentProps));
}