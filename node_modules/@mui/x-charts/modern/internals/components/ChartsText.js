import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["x", "y", "textAnchor", "dominantBaseline", "style", "text", "ownerState"];
import * as React from 'react';
import { getStringSize } from '../domUtils';
import { jsx as _jsx } from "react/jsx-runtime";
export function getWordsByLines({
  style,
  needsComputation,
  text
}) {
  return text.split('\n').map(subText => _extends({
    text: subText
  }, needsComputation ? getStringSize(subText, style) : {
    width: 0,
    height: 0
  }));
}
export function ChartsText(props) {
  const {
      x,
      y,
      textAnchor = 'start',
      dominantBaseline = 'central',
      style,
      text
    } = props,
    textProps = _objectWithoutPropertiesLoose(props, _excluded);
  const wordsByLines = React.useMemo(() => getWordsByLines({
    style,
    needsComputation: text.includes('\n'),
    text
  }), [style, text]);
  let startDy;
  switch (dominantBaseline) {
    case 'hanging':
      startDy = 0;
      break;
    case 'central':
      startDy = (wordsByLines.length - 1) / 2 * -wordsByLines[0].height;
      break;
    default:
      startDy = (wordsByLines.length - 1) * -wordsByLines[0].height;
      break;
  }

  // const transforms = [];
  // if (scaleToFit) {
  //   const lineWidth = wordsByLines[0].width;
  //   transforms.push(`scale(${(isNumber(width as number) ? (width as number) / lineWidth : 1) / lineWidth})`);
  // }
  // if (angle) {
  //   transforms.push(`rotate(${angle}, ${x}, ${y})`);
  // }
  // if (transforms.length) {
  //   textProps.transform = transforms.join(' ');
  // }

  return /*#__PURE__*/_jsx("text", _extends({}, textProps, {
    x: x,
    y: y,
    textAnchor: textAnchor,
    dominantBaseline: dominantBaseline,
    style: style,
    children: wordsByLines.map((line, index) => /*#__PURE__*/_jsx("tspan", {
      x: x,
      dy: `${index === 0 ? startDy : wordsByLines[0].height}px`,
      children: line.text
    }, index))
  }));
}